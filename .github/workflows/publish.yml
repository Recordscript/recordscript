name: "publish"

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'

jobs:
  build-linux:
    name: "Build (Ubuntu latest)"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - name: Set environment variables
        run: |
          echo "VCPKG_ROOT=$VCPKG_INSTALLATION_ROOT" >> $GITHUB_ENV
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install libasound2-dev libudev-dev nasm libxcb-randr0-dev
          $VCPKG_ROOT/vcpkg install libvpx libyuv opus aom
      - name: Setup Tauri
        run: |
          sudo apt-get install -y build-essential libwebkit2gtk-4.0-dev curl wget file libssl-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev
      - name: Install GStreamer
        uses: blinemedical/setup-gstreamer@v1.4.0
        with:
          version: "1.24"
          arch: "x86_64"
      - name: Install NPM dependencies
        run: npm install
      - name: Cache target
        uses: actions/cache@v3
        with:
          key: ${{ runner.OS }}-rust-cache-${{ hashFiles('**/Cargo.toml') }}
          path: src-tauri/target
      - name: Compile application
        run: npm run tauri build
        env:
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
      - uses: actions/upload-artifact@v4
        with:
          name: Release (Ubuntu latest)
          path: src-tauri/target/release/bundle/
          if-no-files-found: "error"

  build-osx:
    # Intentionally disable the macOS build artifact
    if: false
    name: "Build (macOS latest)"
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - uses: friendlyanon/setup-vcpkg@v1
        with: { committish: c8696863d371ab7f46e213d8f5ca923c4aef2a00 }
      - name: Install dependencies
        run: |
          brew install nasm
          $VCPKG_ROOT/vcpkg install libvpx libyuv opus aom
      - name: Install GStreamer
        uses: blinemedical/setup-gstreamer@v1.4.0
        with:
          version: "1.24.5"
      - name: Install NPM dependencies
        run: npm install
      - name: Cache target
        uses: actions/cache@v3
        with:
          key: ${{ runner.OS }}-rust-cache-${{ hashFiles('**/Cargo.toml') }}
          path: src-tauri/target
      - name: Compile application
        run: npm run tauri build
        env:
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          MACOSX_DEPLOYMENT_TARGET: "14.0"
      - uses: actions/upload-artifact@v4
        with:
          name: Release (macOS latest)
          path: src-tauri/target/release/bundle/
          if-no-files-found: "error"

  build-windows:
    name: "Build (Windows latest)"
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - name: Set environment variables
        run: |
          echo "VCPKG_ROOT=$env:VCPKG_INSTALLATION_ROOT" | Out-File -FilePath $env:GITHUB_ENV -Append
      - name: Install dependencies
        run: |
          & "$env:VCPKG_ROOT\vcpkg" install libvpx:x64-windows-static libyuv:x64-windows-static opus:x64-windows-static aom:x64-windows-static
      - name: Install GStreamer
        uses: blinemedical/setup-gstreamer@v1.4.0
        with:
          version: "1.24.5"
          arch: "x86_64"
      - name: Install NPM dependencies
        run: npm install
      - name: Cache target
        uses: actions/cache@v3
        with:
          key: ${{ runner.OS }}-rust-cache-${{ hashFiles('**/Cargo.toml') }}
          path: src-tauri/target
      - name: Compile application
        run: npm run tauri build
        env:
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
      - uses: actions/upload-artifact@v4
        with:
          name: Release (Windows latest)
          path: src-tauri/target/release/bundle/
          if-no-files-found: "error"

  release:
    if: startsWith(github.ref, 'refs/tags/')
    name: Release
    runs-on: ubuntu-latest
    needs: [build-linux, build-windows]
    steps:
      - uses: actions/checkout@v4
      - name: Download Linux artifacts
        uses: actions/download-artifact@v4
        with:
          name: Release (Ubuntu latest)
          path: /home/runner/artifacts/linux
      - name: Download Windows artifacts
        uses: actions/download-artifact@v4
        with:
          name: Release (Windows latest)
          path: /home/runner/artifacts/windows
      - uses: softprops/action-gh-release@v2
        with:
          repository: Recordscript/recordscript
          token: ${{ secrets.CUSTOM_GITHUB_TOKEN }}
          files: |
            /home/runner/artifacts/linux/deb/*.deb
            /home/runner/artifacts/linux/appimage/*.AppImage
            /home/runner/artifacts/windows/msi/*.msi
            /home/runner/artifacts/windows/nsis/*.exe
